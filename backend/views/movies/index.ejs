<% layout('layouts/boilerplate.ejs') %>

<style>
/* Minimal custom styles that Bootstrap doesn't cover */
.bg-gradient-dark {
    background: linear-gradient(135deg, #1a1a1a 0%, #2d1b2e 100%);
}

.text-gradient {
    background: linear-gradient(45deg, #e53e3e, #ff6b6b);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.card-img-aspect {
    aspect-ratio: 16/9;
    object-fit: cover;
}

.hover-lift {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-lift:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.fade-in-up {
    animation: fadeInUp 0.6s ease-out forwards;
}
</style>

<div class="bg-gradient-dark min-vh-100 text-white">
    <!-- Page Title -->
    <div class="container-fluid py-4">
        <h1 class="text-gradient fw-bold text-center display-4 mb-0">
            All Movies
        </h1>
        <div class="d-flex justify-content-center mt-2">
            <div class="bg-danger rounded-pill" style="width: 100px; height: 3px;"></div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="container-fluid px-3 px-md-4 mb-4">
        <div class="bg-dark bg-opacity-75 border border-secondary border-opacity-25 rounded-4 p-3 p-md-4 shadow-lg">
            <div class="row g-3 align-items-end">
                <div class="col-12 col-md-4">
                    <label for="genreFilter" class="form-label fw-semibold text-white mb-2">
                        Filter by Genre:
                    </label>
                    <select id="genreFilter" class="form-select bg-dark text-white border-secondary">
                        <option value="all">All Genres</option>
                    </select>
                </div>
                <div class="col-12 col-md-4">
                    <span class="badge bg-danger fs-6 px-3 py-2 rounded-pill" id="movieCount">
                        <%= allMovies.length %> movies
                    </span>
                </div>
                <div class="col-12 col-md-4">
                    <button class="btn btn-outline-light rounded-pill px-4" id="clearFilter">
                        Clear Filter
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Movies Grid -->
    <div class="container-fluid px-3 px-md-4 pb-5">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-3 g-md-4" id="moviesGrid">
            <% allMovies.forEach((movie, index) => { %>
                <div class="col movie-card" data-genre="<%= movie.genre %>">
                    <div class="card bg-dark border-secondary border-opacity-25 h-100 hover-lift fade-in-up shadow" style="animation-delay: <%= 0.1 + (index * 0.05) %>s;">
                        <div class="overflow-hidden rounded-top">
                            <img src="<%= movie.thumbnailUrl %>" 
                                 class="card-img-top card-img-aspect w-100" 
                                 alt="<%= movie.title %>"
                                 loading="lazy">
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-white fw-bold mb-2 text-truncate" 
                                title="<%= movie.title %>">
                                <%= movie.title %>
                            </h5>
                            <p class="card-text text-white-50 mb-3">
                                <%= movie.genre %> | <%= movie.year %>
                            </p>
                            <a href="/movies/<%= movie._id %>" 
                               class="btn btn-danger rounded-pill fw-semibold text-uppercase mt-auto">
                                Watch Now
                            </a>
                        </div>
                    </div>
                </div>
            <% }) %>
            
            <!-- No movies message -->
            <div class="col-12 text-center py-5 d-none" id="noMoviesMessage">
                <i class="fas fa-film fa-3x text-danger mb-3"></i>
                <p class="text-white-50 fs-5">No movies found for the selected genre.</p>
            </div>
        </div>
    </div>
</div>

<script>
class MovieFilter {
    constructor() {
        this.movieCards = document.querySelectorAll('.movie-card');
        this.genreFilter = document.getElementById('genreFilter');
        this.movieCount = document.getElementById('movieCount');
        this.clearButton = document.getElementById('clearFilter');
        this.noMoviesMessage = document.getElementById('noMoviesMessage');
        
        this.init();
    }

    init() {
        this.populateGenreFilter();
        this.updateMovieCount();
        this.bindEvents();
    }

    populateGenreFilter() {
        const genres = new Set();
        
        this.movieCards.forEach(card => {
            const genre = card.getAttribute('data-genre');
            if (genre) {
                genres.add(genre);
            }
        });

        const sortedGenres = Array.from(genres).sort();
        
        sortedGenres.forEach(genre => {
            const option = document.createElement('option');
            option.value = genre.toLowerCase();
            option.textContent = genre;
            this.genreFilter.appendChild(option);
        });
    }

    bindEvents() {
        this.genreFilter.addEventListener('change', () => {
            this.filterMovies();
        });

        this.clearButton.addEventListener('click', () => {
            this.clearFilter();
        });
    }

    filterMovies() {
        const selectedGenre = this.genreFilter.value;
        let visibleCount = 0;

        this.movieCards.forEach((card, index) => {
            const movieGenre = card.getAttribute('data-genre');
            
            if (selectedGenre === 'all' || movieGenre.toLowerCase() === selectedGenre) {
                card.classList.remove('d-none');
                card.style.animationDelay = `${0.1 + (visibleCount * 0.05)}s`;
                visibleCount++;
            } else {
                card.classList.add('d-none');
            }
        });

        this.updateMovieCount(visibleCount);
        this.toggleNoMoviesMessage(visibleCount === 0);
    }

    clearFilter() {
        this.genreFilter.value = 'all';
        this.filterMovies();
    }

    updateMovieCount(count = null) {
        const totalCount = count !== null ? count : this.movieCards.length;
        this.movieCount.textContent = `${totalCount} movie${totalCount !== 1 ? 's' : ''}`;
    }

    toggleNoMoviesMessage(show) {
        if (show) {
            this.noMoviesMessage.classList.remove('d-none');
        } else {
            this.noMoviesMessage.classList.add('d-none');
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new MovieFilter();
});
</script>