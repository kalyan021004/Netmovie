<% layout('layouts/boilerplate.ejs') %>
<style>
  :root {
    --primary-gradient: linear-gradient(135deg, #e53e3e 0%, #ff6b35 50%, #f7931e 100%);
    --secondary-gradient: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
    --accent-color: #ffd700;
    --card-shadow: 0 15px 35px rgba(229, 62, 62, 0.15);
    --glow: 0 0 20px rgba(229, 62, 62, 0.4);
    --dark-bg: #1a1a1a;
  }

  .settings-wrapper {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    min-height: 100vh;
    padding: 2rem 0;
  }

  .settings-card {
    background: rgba(45, 55, 72, 0.95);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    box-shadow: var(--card-shadow);
    border: 1px solid rgba(255, 255, 255, 0.1);
    max-width: 500px;
    margin: 0 auto;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .settings-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--glow), var(--card-shadow);
  }

  .settings-header {
    background: var(--primary-gradient);
    color: white;
    padding: 2rem;
    text-align: center;
    position: relative;
  }

  .settings-header h1 {
    margin: 0;
    font-size: 2.2rem;
    font-weight: 700;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }

  .settings-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.9;
  }

  .settings-body {
    padding: 2.5rem;
  }

  .form-group-enhanced {
    background: rgba(26, 32, 44, 0.8);
    border-radius: 15px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    border: 2px solid transparent;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .form-group-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(229, 62, 62, 0.1), transparent);
    transition: left 0.5s;
  }

  .form-group-enhanced:hover::before {
    left: 100%;
  }

  .form-group-enhanced:hover {
    border-color: rgba(229, 62, 62, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(229, 62, 62, 0.2);
  }

  .toggle-switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 30px;
    margin-right: 1rem;
  }

  .toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: #ccc;
    transition: .4s;
    border-radius: 30px;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 22px;
    width: 22px;
    left: 4px;
    bottom: 4px;
    background: white;
    transition: .4s;
    border-radius: 50%;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  input:checked + .slider {
    background: var(--primary-gradient);
    box-shadow: var(--glow);
  }

  input:checked + .slider:before {
    transform: translateX(30px);
  }

  .setting-label {
    font-weight: 600;
    font-size: 1.1rem;
    color: #2d3748;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
  }

  .setting-description {
    color: #718096;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .btn-enhanced {
    background: var(--primary-gradient);
    border: none;
    padding: 12px 30px;
    border-radius: 50px;
    color: white;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    position: relative;
    overflow: hidden;
  }

  .btn-enhanced::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255,255,255,0.2);
    border-radius: 50%;
    transition: all 0.5s ease;
    transform: translate(-50%, -50%);
  }

  .btn-enhanced:hover::before {
    width: 300px;
    height: 300px;
  }

  .btn-enhanced:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
  }

  .btn-secondary-enhanced {
    background: transparent;
    border: 2px solid #e2e8f0;
    color: #4a5568;
    padding: 12px 30px;
    border-radius: 50px;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .btn-secondary-enhanced:hover {
    border-color: #667eea;
    color: #667eea;
    transform: translateY(-2px);
  }

  .notification-icon {
    margin-right: 0.5rem;
    color: #667eea;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .settings-card {
    animation: fadeInUp 0.6s ease-out;
  }

  .form-control-enhanced {
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 12px 16px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: rgba(26, 32, 44, 0.8);
    color: #ffffff;
  }

  .form-control-enhanced:focus {
    border-color: #e53e3e;
    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.2);
    background: rgba(26, 32, 44, 1);
    outline: none;
  }

  .form-control-enhanced::placeholder {
    color: #a0aec0;
  }

  .form-label-small {
    font-size: 0.9rem;
    font-weight: 600;
    color: #e2e8f0;
    margin-bottom: 0.5rem;
  }

  .password-input-wrapper {
    position: relative;
  }

  .password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #718096;
    cursor: pointer;
    transition: color 0.3s ease;
  }

  .password-toggle:hover {
    color: var(--accent-color);
  }

  .password-strength {
    margin-top: 0.5rem;
    padding: 0.5rem;
    border-radius: 8px;
    font-size: 0.85rem;
    font-weight: 500;
    display: none;
  }

  .password-strength.weak {
    background: #fed7d7;
    color: #c53030;
    display: block;
  }

  .password-strength.medium {
    background: #feebc8;
    color: #dd6b20;
    display: block;
  }

  .password-strength.strong {
    background: #c6f6d5;
    color: #25855a;
    display: block;
  }

  .invalid-feedback {
    display: none;
    color: #e53e3e;
    font-size: 0.85rem;
    margin-top: 0.5rem;
  }

  .was-validated .form-control:invalid ~ .invalid-feedback {
    display: block;
  }
</style>

<div class="settings-wrapper">
  <div class="container py-4">
    <div class="settings-card">
      <div class="settings-header">
        <div class="settings-icon">
          <i class="fas fa-cog"></i>
        </div>
        <h1>Settings</h1>
      </div>
      
      <div class="settings-body">
        <form action="/profile/settings" method="POST" class="needs-validation" novalidate>
          <!-- Username Section -->
          <div class="form-group-enhanced">
            <div class="setting-label">
              <i class="fas fa-user notification-icon"></i>
              Username
            </div>
            <div class="setting-description mb-3">
              Choose a unique username for your account
            </div>
            <input 
              type="text" 
              class="form-control form-control-enhanced" 
              id="username" 
              name="username" 
              value="<%= user.username || '' %>"
              placeholder="Enter new username"
              required
            />
            <div class="invalid-feedback">
              Please provide a valid username.
            </div>
          </div>

          <!-- Password Section -->
          <div class="form-group-enhanced">
            <div class="setting-label">
              <i class="fas fa-lock notification-icon"></i>
              Change Password
            </div>
            <div class="setting-description mb-3">
              Update your account password for better security
            </div>
            
            <div class="mb-3">
              <label for="currentPassword" class="form-label-small">Current Password</label>
              <div class="password-input-wrapper">
                <input 
                  type="password" 
                  class="form-control form-control-enhanced" 
                  id="currentPassword" 
                  name="currentPassword" 
                  placeholder="Enter current password"
                />
                <button type="button" class="password-toggle" onclick="togglePassword('currentPassword')">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="newPassword" class="form-label-small">New Password</label>
              <div class="password-input-wrapper">
                <input 
                  type="password" 
                  class="form-control form-control-enhanced" 
                  id="newPassword" 
                  name="newPassword" 
                  placeholder="Enter new password"
                  minlength="6"
                />
                <button type="button" class="password-toggle" onclick="togglePassword('newPassword')">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="password-strength" id="passwordStrength"></div>
            </div>
            
            <div>
              <label for="confirmPassword" class="form-label-small">Confirm New Password</label>
              <div class="password-input-wrapper">
                <input 
                  type="password" 
                  class="form-control form-control-enhanced" 
                  id="confirmPassword" 
                  name="confirmPassword" 
                  placeholder="Confirm new password"
                />
                <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="invalid-feedback">
                Passwords must match.
              </div>
            </div>
          </div>

          <!-- Email Notifications Section -->
          <div class="form-group-enhanced">
            <div class="setting-label">
              <i class="fas fa-envelope notification-icon"></i>
              Email Notifications
            </div>
            <div class="d-flex align-items-center justify-content-between">
              <div class="setting-description">
                Receive updates and notifications via email when important events occur.
              </div>
              <label class="toggle-switch">
                <input 
                  type="checkbox" 
                  id="emailNotifications" 
                  name="emailNotifications"
                  <%= user.emailNotifications ? 'checked' : '' %>
                />
                <span class="slider"></span>
              </label>
            </div>
          </div>

          <div class="d-flex gap-3 justify-content-center">
            <button type="submit" class="btn btn-enhanced">
              <i class="fas fa-save me-2"></i>
              Save Settings
            </button>
            <a href="/profile" class="btn btn-secondary-enhanced">
              <i class="fas fa-arrow-left me-2"></i>
              Back to Profile
            </a>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  (() => {
    'use strict'
    const forms = document.querySelectorAll('.needs-validation')
    Array.from(forms).forEach(form => {
      form.addEventListener('submit', event => {
        if (!form.checkValidity()) {
          event.preventDefault()
          event.stopPropagation()
        }
        form.classList.add('was-validated')
      }, false)
    })

    // Add smooth toggle animation feedback
    const toggles = document.querySelectorAll('.toggle-switch input')
    toggles.forEach(toggle => {
      toggle.addEventListener('change', function() {
        const card = this.closest('.form-group-enhanced')
        card.style.transform = 'scale(1.02)'
        setTimeout(() => {
          card.style.transform = 'scale(1)'
        }, 150)
      })
    })

    // Password visibility toggle
    window.togglePassword = function(fieldId) {
      const field = document.getElementById(fieldId)
      const button = field.nextElementSibling
      const icon = button.querySelector('i')
      
      if (field.type === 'password') {
        field.type = 'text'
        icon.classList.remove('fa-eye')
        icon.classList.add('fa-eye-slash')
      } else {
        field.type = 'password'
        icon.classList.remove('fa-eye-slash')
        icon.classList.add('fa-eye')
      }
    }

    // Password strength checker
    const newPasswordField = document.getElementById('newPassword')
    const confirmPasswordField = document.getElementById('confirmPassword')
    const strengthIndicator = document.getElementById('passwordStrength')

    if (newPasswordField) {
      newPasswordField.addEventListener('input', function() {
        const password = this.value
        const strength = checkPasswordStrength(password)
        
        strengthIndicator.className = 'password-strength ' + strength.class
        strengthIndicator.textContent = strength.text
      })
    }

    if (confirmPasswordField) {
      confirmPasswordField.addEventListener('input', function() {
        const newPassword = newPasswordField.value
        const confirmPassword = this.value
        
        if (confirmPassword && newPassword !== confirmPassword) {
          this.setCustomValidity('Passwords do not match')
        } else {
          this.setCustomValidity('')
        }
      })
    }

    function checkPasswordStrength(password) {
      if (password.length < 6) {
        return { class: 'weak', text: 'Password too short (minimum 6 characters)' }
      }
      
      let score = 0
      if (password.length >= 8) score++
      if (/[a-z]/.test(password)) score++
      if (/[A-Z]/.test(password)) score++
      if (/[0-9]/.test(password)) score++
      if (/[^A-Za-z0-9]/.test(password)) score++
      
      if (score < 3) {
        return { class: 'weak', text: 'Weak password - add uppercase, numbers, or symbols' }
      } else if (score < 4) {
        return { class: 'medium', text: 'Medium strength - consider adding more variety' }
      } else {
        return { class: 'strong', text: 'Strong password!' }
      }
    }
  })()
</script>